/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DecryptMode {
    #[serde(rename = "RAW")]
    RAW,
    #[serde(rename = "PKCS1")]
    PKCS1,
    #[serde(rename = "OAEP_MD5")]
    OAEPMD5,
    #[serde(rename = "OAEP_SHA1")]
    OAEPSHA1,
    #[serde(rename = "OAEP_SHA224")]
    OAEPSHA224,
    #[serde(rename = "OAEP_SHA256")]
    OAEPSHA256,
    #[serde(rename = "OAEP_SHA384")]
    OAEPSHA384,
    #[serde(rename = "OAEP_SHA512")]
    OAEPSHA512,
    #[serde(rename = "AES_CBC")]
    AESCBC,

}

impl ToString for DecryptMode {
    fn to_string(&self) -> String {
        match self {
            Self::RAW => String::from("RAW"),
            Self::PKCS1 => String::from("PKCS1"),
            Self::OAEPMD5 => String::from("OAEP_MD5"),
            Self::OAEPSHA1 => String::from("OAEP_SHA1"),
            Self::OAEPSHA224 => String::from("OAEP_SHA224"),
            Self::OAEPSHA256 => String::from("OAEP_SHA256"),
            Self::OAEPSHA384 => String::from("OAEP_SHA384"),
            Self::OAEPSHA512 => String::from("OAEP_SHA512"),
            Self::AESCBC => String::from("AES_CBC"),
        }
    }
}

impl Default for DecryptMode {
    fn default() -> DecryptMode {
        Self::RAW
    }
}




