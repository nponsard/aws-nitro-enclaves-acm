/*
 * NetHSM
 *
 * All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href=\"https://tools.ietf.org/html/rfc4648#section-4\">base64</a> encoded values are Big Endian.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

// import vtok_common
use vtok_common;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::blocking::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl ApiKey {
    pub fn from_api_configuration(vtok_api_key: vtok_common::config::ApiKey) -> Self {
        ApiKey {
            prefix: vtok_api_key.prefix,
            key: vtok_api_key.key,
        }
    }
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }


    // apply the configuration from the file
    pub fn new_with_api_configuration(
        file_config: vtok_common::config::ApiConfiguration,
    ) -> Configuration {
        // create with default values then override with config values

        let mut configuration = Configuration::default();

        configuration.base_path = file_config.base_path.unwrap_or(configuration.base_path);
        configuration.user_agent = file_config.user_agent.or(configuration.user_agent);
        configuration.basic_auth = file_config.basic_auth.or(configuration.basic_auth);
        configuration.oauth_access_token = file_config
            .oauth_access_token
            .or(configuration.oauth_access_token);
        configuration.bearer_access_token = file_config
            .bearer_access_token
            .or(configuration.bearer_access_token);

        if let Some(api_key) = file_config.api_key {
            configuration.api_key = Some(ApiKey::from_api_configuration(api_key));
        }

        configuration
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "https://nethsmdemo.nitrokey.com/api/v1".to_owned(),
            user_agent: Some("OpenAPI-Generator/v1/rust".to_owned()),
            client: reqwest::blocking::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
